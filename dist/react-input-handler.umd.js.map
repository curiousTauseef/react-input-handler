{"version":3,"file":"react-input-handler.umd.js","sources":["../src/ReactInputHandler.js"],"sourcesContent":["'use strict'\n\nimport set from 'lodash.set'\n\n/**\n * Export React Input Handler.\n */\n\nexport default handler\n\n/**\n * The React Input Handler function.\n * @param {Object} event The event.\n */\nfunction handler(event) {\n\n  if (!event) {\n    throw new Error('event must be defined')\n  }\n\n  if (typeof event !== 'object') {\n    throw new Error('event must be an object')\n  }\n\n  if (typeof this.setState !== 'function') {\n    throw new Error('react-input-handler must be bound to the component instance')\n  }\n\n  const target = event.target\n  const name = target.name\n\n  if (!name) {\n    throw new Error('all input must have a name prop')\n  }\n\n  // If the name prop ends with `[]` then the prop is an array.\n  const usingArrayNotation = name.substr(-2) === '[]'\n\n  if (usingArrayNotation) {\n    const arrayNotationName = name.substr(0, name.length - 2)\n    const adding = getValue(target)\n    const array = this.state[arrayNotationName] || []\n    const value = target.value\n\n    // Add the target value to the array.\n    if (adding) {\n\n      // Add the new value to the array and persist into the state.\n      if (array.indexOf(value) === -1) {\n        this.setState((prevState) => ({\n          [arrayNotationName]: array.concat(value)\n        }))\n      }\n    } else {\n\n      // Remove the target value from the array.\n      const indexToRemove = array.indexOf(value)\n      if (indexToRemove > -1) {\n        array.splice(indexToRemove, 1)\n      }\n\n      // Persist the changed array into the state.\n      this.setState(prevState => (\n        set(prevState, arrayNotationName, array)\n      ))\n    }\n  } else {\n\n    // Modify the state.\n    this.setState(prevState => (\n      set(prevState, name, getValue(target))\n    ))\n  }\n}\n\n/**\n * Utility functions.\n */\n\n/**\n * Return the value of a DOM element.\n * @param {Object} element The element.\n * @param {Boolean|String} The DOM element value.\n */\nfunction getValue(element) {\n  switch(element.type) {\n    case 'checkbox':\n      return element.checked\n    case 'select-multiple':\n      return [ ...element.querySelectorAll(':checked') ]\n        .map((checked) => checked.value)\n    default:\n      return element.value\n  }\n}\n"],"names":["getValue","element","type","checked","querySelectorAll","map","value","event","Error","this","setState","target","name","substr","arrayNotationName","length","adding","array","state","indexOf","prevState","concat","indexToRemove","splice","set"],"mappings":"uOAoFA,SAASA,EAASC,UACTA,EAAQC,UACR,kBACID,EAAQE,YACZ,oCACSF,EAAQG,iBAAiB,cAClCC,IAAI,SAACF,UAAYA,EAAQG,uBAErBL,EAAQK,6fA9ErB,SAAiBC,OAEVA,QACG,IAAIC,MAAM,4BAGG,qBAAVD,gBAAAA,UACH,IAAIC,MAAM,8BAGW,mBAAlBC,KAAKC,eACR,IAAIF,MAAM,mEAGZG,EAASJ,EAAMI,OACfC,EAAOD,EAAOC,SAEfA,QACG,IAAIJ,MAAM,sCAI6B,OAApBI,EAAKC,QAAQ,GAEhB,KAChBC,EAAoBF,EAAKC,OAAO,EAAGD,EAAKG,OAAS,GACjDC,EAAShB,EAASW,GAClBM,EAAQR,KAAKS,MAAMJ,OACnBR,EAAQK,EAAOL,SAGjBU,GAG4B,IAA1BC,EAAME,QAAQb,SACXI,SAAS,SAACU,eACZN,EAAoBG,EAAMI,OAAOf,UAGjC,KAGCgB,EAAgBL,EAAME,QAAQb,GAChCgB,GAAiB,KACbC,OAAOD,EAAe,QAIzBZ,SAAS,mBACZc,EAAIJ,EAAWN,EAAmBG,gBAMjCP,SAAS,mBACZc,EAAIJ,EAAWR,EAAMZ,EAASW"}